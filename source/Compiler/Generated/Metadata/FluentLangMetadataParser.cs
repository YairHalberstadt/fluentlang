//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/FluentLangMetadataParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FluentLang.Compiler.Generated.Metadata {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FluentLangMetadataParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, WHITESPACES=2, PLUS=3, MINUS=4, STAR=5, DIV=6, 
		PERCENT=7, LT=8, GT=9, OP_EQ=10, OP_NE=11, OP_LE=12, OP_GE=13, ASSIGNMENT=14, 
		OPEN_BRACE=15, CLOSE_BRACE=16, OPEN_PARENS=17, CLOSE_PARENS=18, DOT=19, 
		COMMA=20, COLON=21, SEMICOLON=22, DISCARD=23, BOOL=24, INT=25, DOUBLE=26, 
		CHAR=27, STRING=28, LITERAL_TRUE=29, LITERAL_FALSE=30, INTEGER_LITERAL=31, 
		REAL_LITERAL=32, CHARACTER_LITERAL=33, REGULAR_STRING=34, NAMESPACE=35, 
		INTERFACE=36, RETURN=37, IF=38, ELSE=39, MIXIN=40, EXPORT=41, OPEN=42, 
		LET=43, UPPERCASE_IDENTIFIER=44, LOWERCASE_IDENTIFIER=45;
	public const int
		RULE_parameter_metadata = 0, RULE_return_type_metadata = 1, RULE_interface_method_metadata = 2, 
		RULE_full_qualified_name_metadata = 3, RULE_parameters = 4, RULE_parameter = 5, 
		RULE_type_declaration = 6, RULE_type = 7, RULE_qualified_name = 8, RULE_primitive_type = 9, 
		RULE_anonymous_interface_declaration = 10, RULE_simple_anonymous_interface_declaration = 11, 
		RULE_interface_member_declaration = 12, RULE_interface_method_signature = 13;
	public static readonly string[] ruleNames = {
		"parameter_metadata", "return_type_metadata", "interface_method_metadata", 
		"full_qualified_name_metadata", "parameters", "parameter", "type_declaration", 
		"type", "qualified_name", "primitive_type", "anonymous_interface_declaration", 
		"simple_anonymous_interface_declaration", "interface_member_declaration", 
		"interface_method_signature"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'=='", 
		"'!='", "'<='", "'>='", "'='", "'{'", "'}'", "'('", "')'", "'.'", "','", 
		"':'", "';'", "'_'", "'bool'", "'int'", "'double'", "'char'", "'string'", 
		"'true'", "'false'", null, null, null, null, "'namespace'", "'interface'", 
		"'return'", "'if'", "'else'", "'mixin'", "'export'", "'open'", "'let'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "WHITESPACES", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "LT", "GT", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "ASSIGNMENT", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", 
		"COLON", "SEMICOLON", "DISCARD", "BOOL", "INT", "DOUBLE", "CHAR", "STRING", 
		"LITERAL_TRUE", "LITERAL_FALSE", "INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "NAMESPACE", "INTERFACE", "RETURN", "IF", "ELSE", "MIXIN", 
		"EXPORT", "OPEN", "LET", "UPPERCASE_IDENTIFIER", "LOWERCASE_IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentLangMetadataParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentLangMetadataParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentLangMetadataParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentLangMetadataParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Parameter_metadataContext : ParserRuleContext {
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangMetadataParser.Eof, 0); }
		public Parameter_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterParameter_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitParameter_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_metadataContext parameter_metadata() {
		Parameter_metadataContext _localctx = new Parameter_metadataContext(Context, State);
		EnterRule(_localctx, 0, RULE_parameter_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; parameter();
			State = 29; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_type_metadataContext : ParserRuleContext {
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangMetadataParser.Eof, 0); }
		public Return_type_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterReturn_type_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitReturn_type_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_type_metadataContext return_type_metadata() {
		Return_type_metadataContext _localctx = new Return_type_metadataContext(Context, State);
		EnterRule(_localctx, 2, RULE_return_type_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; type_declaration();
			State = 32; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_metadataContext : ParserRuleContext {
		public Interface_method_signatureContext interface_method_signature() {
			return GetRuleContext<Interface_method_signatureContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangMetadataParser.Eof, 0); }
		public Interface_method_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterInterface_method_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitInterface_method_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_metadataContext interface_method_metadata() {
		Interface_method_metadataContext _localctx = new Interface_method_metadataContext(Context, State);
		EnterRule(_localctx, 4, RULE_interface_method_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; interface_method_signature();
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_qualified_name_metadataContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Full_qualified_name_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_qualified_name_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterFull_qualified_name_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitFull_qualified_name_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_qualified_name_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_qualified_name_metadataContext full_qualified_name_metadata() {
		Full_qualified_name_metadataContext _localctx = new Full_qualified_name_metadataContext(Context, State);
		EnterRule(_localctx, 6, RULE_full_qualified_name_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangMetadataParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangMetadataParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOWERCASE_IDENTIFIER) {
				{
				State = 39; parameter();
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 40; Match(COMMA);
					State = 41; parameter();
					}
					}
					State = 46;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode LOWERCASE_IDENTIFIER() { return GetToken(FluentLangMetadataParser.LOWERCASE_IDENTIFIER, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(LOWERCASE_IDENTIFIER);
			State = 50; type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FluentLangMetadataParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(COLON);
			State = 53; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Primitive_typeContext primitive_type() {
			return GetRuleContext<Primitive_typeContext>(0);
		}
		public Anonymous_interface_declarationContext anonymous_interface_declaration() {
			return GetRuleContext<Anonymous_interface_declarationContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; primitive_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57; anonymous_interface_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		public ITerminalNode[] UPPERCASE_IDENTIFIER() { return GetTokens(FluentLangMetadataParser.UPPERCASE_IDENTIFIER); }
		public ITerminalNode UPPERCASE_IDENTIFIER(int i) {
			return GetToken(FluentLangMetadataParser.UPPERCASE_IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FluentLangMetadataParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FluentLangMetadataParser.DOT, i);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_qualified_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(UPPERCASE_IDENTIFIER);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 61; Match(DOT);
				State = 62; Match(UPPERCASE_IDENTIFIER);
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(FluentLangMetadataParser.BOOL, 0); }
		public ITerminalNode INT() { return GetToken(FluentLangMetadataParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(FluentLangMetadataParser.DOUBLE, 0); }
		public ITerminalNode CHAR() { return GetToken(FluentLangMetadataParser.CHAR, 0); }
		public ITerminalNode STRING() { return GetToken(FluentLangMetadataParser.STRING, 0); }
		public Primitive_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_typeContext primitive_type() {
		Primitive_typeContext _localctx = new Primitive_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_primitive_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_interface_declarationContext : ParserRuleContext {
		public Simple_anonymous_interface_declarationContext[] simple_anonymous_interface_declaration() {
			return GetRuleContexts<Simple_anonymous_interface_declarationContext>();
		}
		public Simple_anonymous_interface_declarationContext simple_anonymous_interface_declaration(int i) {
			return GetRuleContext<Simple_anonymous_interface_declarationContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(FluentLangMetadataParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(FluentLangMetadataParser.PLUS, i);
		}
		public Anonymous_interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_interface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_interface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_interface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_interface_declarationContext anonymous_interface_declaration() {
		Anonymous_interface_declarationContext _localctx = new Anonymous_interface_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_anonymous_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; simple_anonymous_interface_declaration();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 71; Match(PLUS);
				State = 72; simple_anonymous_interface_declaration();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_anonymous_interface_declarationContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangMetadataParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangMetadataParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Simple_anonymous_interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_anonymous_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterSimple_anonymous_interface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitSimple_anonymous_interface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_anonymous_interface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_anonymous_interface_declarationContext simple_anonymous_interface_declaration() {
		Simple_anonymous_interface_declarationContext _localctx = new Simple_anonymous_interface_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_simple_anonymous_interface_declaration);
		int _la;
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(OPEN_BRACE);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UPPERCASE_IDENTIFIER) {
					{
					{
					State = 79; interface_member_declaration();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85; Match(CLOSE_BRACE);
				}
				break;
			case UPPERCASE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public Interface_method_signatureContext interface_method_signature() {
			return GetRuleContext<Interface_method_signatureContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangMetadataParser.SEMICOLON, 0); }
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_interface_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; interface_method_signature();
			State = 90; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_signatureContext : ParserRuleContext {
		public ITerminalNode UPPERCASE_IDENTIFIER() { return GetToken(FluentLangMetadataParser.UPPERCASE_IDENTIFIER, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(FluentLangMetadataParser.OPEN_PARENS, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(FluentLangMetadataParser.CLOSE_PARENS, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Interface_method_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.EnterInterface_method_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangMetadataParserListener typedListener = listener as IFluentLangMetadataParserListener;
			if (typedListener != null) typedListener.ExitInterface_method_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangMetadataParserVisitor<TResult> typedVisitor = visitor as IFluentLangMetadataParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_signatureContext interface_method_signature() {
		Interface_method_signatureContext _localctx = new Interface_method_signatureContext(Context, State);
		EnterRule(_localctx, 26, RULE_interface_method_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(UPPERCASE_IDENTIFIER);
			State = 93; Match(OPEN_PARENS);
			State = 94; parameters();
			State = 95; Match(CLOSE_PARENS);
			State = 96; type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\x65', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '-', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x30', '\v', '\x6', '\x5', '\x6', '\x32', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '=', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x42', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x45', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', 'L', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'O', '\v', '\f', '\x3', '\r', '\x3', '\r', '\a', '\r', 'S', '\n', '\r', 
		'\f', '\r', '\xE', '\r', 'V', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', 'Z', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\x3', '\x3', '\x2', '\x1A', '\x1E', '\x2', '^', '\x2', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'$', '\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x31', '\x3', '\x2', '\x2', '\x2', '\f', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x36', '\x3', '\x2', '\x2', '\x2', '\x10', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '>', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x16', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1A', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '^', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x5', '\f', '\a', '\x2', '\x1F', ' ', '\a', '\x2', '\x2', '\x3', ' ', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x5', '\xE', '\b', '\x2', 
		'\"', '#', '\a', '\x2', '\x2', '\x3', '#', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x5', '\x1C', '\xF', '\x2', '%', '&', '\a', '\x2', '\x2', 
		'\x3', '&', '\a', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x5', '\x12', 
		'\n', '\x2', '(', '\t', '\x3', '\x2', '\x2', '\x2', ')', '.', '\x5', '\f', 
		'\a', '\x2', '*', '+', '\a', '\x16', '\x2', '\x2', '+', '-', '\x5', '\f', 
		'\a', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x31', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\a', '/', '\x2', '\x2', '\x34', '\x35', 
		'\x5', '\xE', '\b', '\x2', '\x35', '\r', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\a', '\x17', '\x2', '\x2', '\x37', '\x38', '\x5', '\x10', '\t', 
		'\x2', '\x38', '\xF', '\x3', '\x2', '\x2', '\x2', '\x39', '=', '\x5', 
		'\x12', '\n', '\x2', ':', '=', '\x5', '\x14', '\v', '\x2', ';', '=', '\x5', 
		'\x16', '\f', '\x2', '<', '\x39', '\x3', '\x2', '\x2', '\x2', '<', ':', 
		'\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\a', '.', '\x2', '\x2', 
		'?', '@', '\a', '\x15', '\x2', '\x2', '@', '\x42', '\a', '.', '\x2', '\x2', 
		'\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\t', '\x2', 
		'\x2', '\x2', 'G', '\x15', '\x3', '\x2', '\x2', '\x2', 'H', 'M', '\x5', 
		'\x18', '\r', '\x2', 'I', 'J', '\a', '\x5', '\x2', '\x2', 'J', 'L', '\x5', 
		'\x18', '\r', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\x17', '\x3', '\x2', '\x2', '\x2', 'O', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'P', 'T', '\a', '\x11', '\x2', '\x2', 'Q', 
		'S', '\x5', '\x1A', '\xE', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\a', '\x12', '\x2', '\x2', 
		'X', 'Z', '\x5', '\x12', '\n', '\x2', 'Y', 'P', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x5', '\x1C', '\xF', '\x2', '\\', ']', '\a', '\x18', 
		'\x2', '\x2', ']', '\x1B', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'.', '\x2', '\x2', '_', '`', '\a', '\x13', '\x2', '\x2', '`', '\x61', 
		'\x5', '\n', '\x6', '\x2', '\x61', '\x62', '\a', '\x14', '\x2', '\x2', 
		'\x62', '\x63', '\x5', '\xE', '\b', '\x2', '\x63', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\t', '.', '\x31', '<', '\x43', 'M', 'T', 'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FluentLang.Compiler.Generated.Metadata
