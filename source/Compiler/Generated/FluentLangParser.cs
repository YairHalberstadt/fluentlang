//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/FluentLangParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FluentLang.Compiler.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FluentLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, WHITESPACES=2, PLUS=3, MINUS=4, STAR=5, DIV=6, 
		PERCENT=7, LT=8, GT=9, OP_EQ=10, OP_NE=11, OP_LE=12, OP_GE=13, ASSIGNMENT=14, 
		OPEN_BRACE=15, CLOSE_BRACE=16, OPEN_PARENS=17, CLOSE_PARENS=18, DOT=19, 
		COMMA=20, COLON=21, SEMICOLON=22, DISCARD=23, LOGICAL_OR=24, RIGHT_ARROW=25, 
		BOOL=26, INT=27, DOUBLE=28, CHAR=29, STRING=30, LITERAL_TRUE=31, LITERAL_FALSE=32, 
		INTEGER_LITERAL=33, REAL_LITERAL=34, CHARACTER_LITERAL=35, REGULAR_STRING=36, 
		NAMESPACE=37, INTERFACE=38, RETURN=39, IF=40, ELSE=41, MIXIN=42, EXPORT=43, 
		OPEN=44, LET=45, MATCH=46, UPPERCASE_IDENTIFIER=47, LOWERCASE_IDENTIFIER=48;
	public const int
		RULE_compilation_unit = 0, RULE_open_directives = 1, RULE_open_directive = 2, 
		RULE_qualified_name = 3, RULE_namespace_member_declaration = 4, RULE_namespace_declaration = 5, 
		RULE_interface_declaration = 6, RULE_type_parameter_list = 7, RULE_type_parameter = 8, 
		RULE_anonymous_interface_declaration = 9, RULE_simple_anonymous_interface_declaration = 10, 
		RULE_named_type_reference = 11, RULE_type_argument_list = 12, RULE_interface_member_declaration = 13, 
		RULE_method_signature = 14, RULE_parameters = 15, RULE_parameter = 16, 
		RULE_type_declaration = 17, RULE_type = 18, RULE_primitive_type = 19, 
		RULE_union = 20, RULE_union_part_type = 21, RULE_method_declaration = 22, 
		RULE_method_body = 23, RULE_method_statement = 24, RULE_declaration_statement = 25, 
		RULE_return_statement = 26, RULE_expression = 27, RULE_empty_interface = 28, 
		RULE_object_patch = 29, RULE_method_reference = 30, RULE_operator = 31, 
		RULE_prefix_unary_operator = 32, RULE_literal = 33, RULE_invocation = 34, 
		RULE_arguments = 35, RULE_match_expression_arm = 36, RULE_parameter_metadata = 37, 
		RULE_return_type_metadata = 38, RULE_anonymous_interface_declaration_metadata = 39, 
		RULE_type_parameter_metadata = 40, RULE_full_qualified_name_metadata = 41;
	public static readonly string[] ruleNames = {
		"compilation_unit", "open_directives", "open_directive", "qualified_name", 
		"namespace_member_declaration", "namespace_declaration", "interface_declaration", 
		"type_parameter_list", "type_parameter", "anonymous_interface_declaration", 
		"simple_anonymous_interface_declaration", "named_type_reference", "type_argument_list", 
		"interface_member_declaration", "method_signature", "parameters", "parameter", 
		"type_declaration", "type", "primitive_type", "union", "union_part_type", 
		"method_declaration", "method_body", "method_statement", "declaration_statement", 
		"return_statement", "expression", "empty_interface", "object_patch", "method_reference", 
		"operator", "prefix_unary_operator", "literal", "invocation", "arguments", 
		"match_expression_arm", "parameter_metadata", "return_type_metadata", 
		"anonymous_interface_declaration_metadata", "type_parameter_metadata", 
		"full_qualified_name_metadata"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'=='", 
		"'!='", "'<='", "'>='", "'='", "'{'", "'}'", "'('", "')'", "'.'", "','", 
		"':'", "';'", "'_'", "'|'", "'=>'", "'bool'", "'int'", "'double'", "'char'", 
		"'string'", "'true'", "'false'", null, null, null, null, "'namespace'", 
		"'interface'", "'return'", "'if'", "'else'", "'mixin'", "'export'", "'open'", 
		"'let'", "'match'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "WHITESPACES", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "LT", "GT", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "ASSIGNMENT", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", 
		"COLON", "SEMICOLON", "DISCARD", "LOGICAL_OR", "RIGHT_ARROW", "BOOL", 
		"INT", "DOUBLE", "CHAR", "STRING", "LITERAL_TRUE", "LITERAL_FALSE", "INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "NAMESPACE", "INTERFACE", 
		"RETURN", "IF", "ELSE", "MIXIN", "EXPORT", "OPEN", "LET", "MATCH", "UPPERCASE_IDENTIFIER", 
		"LOWERCASE_IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FluentLangParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FluentLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FluentLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FluentLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public Open_directivesContext open_directives() {
			return GetRuleContext<Open_directivesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangParser.Eof, 0); }
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; open_directives();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAMESPACE) | (1L << INTERFACE) | (1L << EXPORT) | (1L << UPPERCASE_IDENTIFIER))) != 0)) {
				{
				{
				State = 85; namespace_member_declaration();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_directivesContext : ParserRuleContext {
		public Open_directiveContext[] open_directive() {
			return GetRuleContexts<Open_directiveContext>();
		}
		public Open_directiveContext open_directive(int i) {
			return GetRuleContext<Open_directiveContext>(i);
		}
		public Open_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterOpen_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitOpen_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_directivesContext open_directives() {
		Open_directivesContext _localctx = new Open_directivesContext(Context, State);
		EnterRule(_localctx, 2, RULE_open_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN) {
				{
				{
				State = 93; open_directive();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_directiveContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(FluentLangParser.OPEN, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangParser.SEMICOLON, 0); }
		public Open_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterOpen_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitOpen_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_directiveContext open_directive() {
		Open_directiveContext _localctx = new Open_directiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_open_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(OPEN);
			State = 100; qualified_name();
			State = 101; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		public ITerminalNode[] UPPERCASE_IDENTIFIER() { return GetTokens(FluentLangParser.UPPERCASE_IDENTIFIER); }
		public ITerminalNode UPPERCASE_IDENTIFIER(int i) {
			return GetToken(FluentLangParser.UPPERCASE_IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FluentLangParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FluentLangParser.DOT, i);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_qualified_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(UPPERCASE_IDENTIFIER);
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 104; Match(DOT);
					State = 105; Match(UPPERCASE_IDENTIFIER);
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Interface_declarationContext interface_declaration() {
			return GetRuleContext<Interface_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespace_member_declaration);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; namespace_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; interface_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113; method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(FluentLangParser.NAMESPACE, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangParser.CLOSE_BRACE, 0); }
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(NAMESPACE);
			State = 117; qualified_name();
			State = 118; Match(OPEN_BRACE);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NAMESPACE) | (1L << INTERFACE) | (1L << EXPORT) | (1L << UPPERCASE_IDENTIFIER))) != 0)) {
				{
				{
				State = 119; namespace_member_declaration();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(FluentLangParser.INTERFACE, 0); }
		public ITerminalNode UPPERCASE_IDENTIFIER() { return GetToken(FluentLangParser.UPPERCASE_IDENTIFIER, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Anonymous_interface_declarationContext anonymous_interface_declaration() {
			return GetRuleContext<Anonymous_interface_declarationContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(FluentLangParser.EXPORT, 0); }
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 127; Match(EXPORT);
				}
			}

			State = 130; Match(INTERFACE);
			State = 131; Match(UPPERCASE_IDENTIFIER);
			State = 132; type_parameter_list();
			State = 133; anonymous_interface_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(FluentLangParser.LT, 0); }
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(FluentLangParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 135; Match(LT);
				State = 136; type_parameter();
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 137; Match(COMMA);
					State = 138; type_parameter();
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 144; Match(GT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public ITerminalNode UPPERCASE_IDENTIFIER() { return GetToken(FluentLangParser.UPPERCASE_IDENTIFIER, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(UPPERCASE_IDENTIFIER);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 149; type_declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_interface_declarationContext : ParserRuleContext {
		public Simple_anonymous_interface_declarationContext[] simple_anonymous_interface_declaration() {
			return GetRuleContexts<Simple_anonymous_interface_declarationContext>();
		}
		public Simple_anonymous_interface_declarationContext simple_anonymous_interface_declaration(int i) {
			return GetRuleContext<Simple_anonymous_interface_declarationContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(FluentLangParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(FluentLangParser.PLUS, i);
		}
		public Anonymous_interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_interface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_interface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_interface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_interface_declarationContext anonymous_interface_declaration() {
		Anonymous_interface_declarationContext _localctx = new Anonymous_interface_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_anonymous_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; simple_anonymous_interface_declaration();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 153; Match(PLUS);
				State = 154; simple_anonymous_interface_declaration();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_anonymous_interface_declarationContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Named_type_referenceContext named_type_reference() {
			return GetRuleContext<Named_type_referenceContext>(0);
		}
		public Simple_anonymous_interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_anonymous_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterSimple_anonymous_interface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitSimple_anonymous_interface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_anonymous_interface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_anonymous_interface_declarationContext simple_anonymous_interface_declaration() {
		Simple_anonymous_interface_declarationContext _localctx = new Simple_anonymous_interface_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_simple_anonymous_interface_declaration);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(OPEN_BRACE);
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UPPERCASE_IDENTIFIER) {
					{
					{
					State = 161; interface_member_declaration();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167; Match(CLOSE_BRACE);
				}
				break;
			case UPPERCASE_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; named_type_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_type_referenceContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Named_type_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_type_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterNamed_type_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitNamed_type_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_type_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_type_referenceContext named_type_reference() {
		Named_type_referenceContext _localctx = new Named_type_referenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_named_type_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; qualified_name();
			State = 172; type_argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(FluentLangParser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(FluentLangParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 174; Match(LT);
				State = 175; type();
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 176; Match(COMMA);
					State = 177; type();
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 183; Match(GT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public Method_signatureContext method_signature() {
			return GetRuleContext<Method_signatureContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangParser.SEMICOLON, 0); }
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_interface_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; method_signature();
			State = 188; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_signatureContext : ParserRuleContext {
		public ITerminalNode UPPERCASE_IDENTIFIER() { return GetToken(FluentLangParser.UPPERCASE_IDENTIFIER, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(FluentLangParser.OPEN_PARENS, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(FluentLangParser.CLOSE_PARENS, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Method_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMethod_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMethod_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_signatureContext method_signature() {
		Method_signatureContext _localctx = new Method_signatureContext(Context, State);
		EnterRule(_localctx, 28, RULE_method_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(UPPERCASE_IDENTIFIER);
			State = 191; type_parameter_list();
			State = 192; Match(OPEN_PARENS);
			State = 193; parameters();
			State = 194; Match(CLOSE_PARENS);
			State = 195; type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOWERCASE_IDENTIFIER) {
				{
				State = 197; parameter();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 198; Match(COMMA);
					State = 199; parameter();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode LOWERCASE_IDENTIFIER() { return GetToken(FluentLangParser.LOWERCASE_IDENTIFIER, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(LOWERCASE_IDENTIFIER);
			State = 208; type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(FluentLangParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(COLON);
			State = 211; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Named_type_referenceContext named_type_reference() {
			return GetRuleContext<Named_type_referenceContext>(0);
		}
		public Primitive_typeContext primitive_type() {
			return GetRuleContext<Primitive_typeContext>(0);
		}
		public Anonymous_interface_declarationContext anonymous_interface_declaration() {
			return GetRuleContext<Anonymous_interface_declarationContext>(0);
		}
		public UnionContext union() {
			return GetRuleContext<UnionContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; named_type_reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; primitive_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; anonymous_interface_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 216; union();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(FluentLangParser.BOOL, 0); }
		public ITerminalNode INT() { return GetToken(FluentLangParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(FluentLangParser.DOUBLE, 0); }
		public ITerminalNode CHAR() { return GetToken(FluentLangParser.CHAR, 0); }
		public ITerminalNode STRING() { return GetToken(FluentLangParser.STRING, 0); }
		public Primitive_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_typeContext primitive_type() {
		Primitive_typeContext _localctx = new Primitive_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitive_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public Union_part_typeContext[] union_part_type() {
			return GetRuleContexts<Union_part_typeContext>();
		}
		public Union_part_typeContext union_part_type(int i) {
			return GetRuleContext<Union_part_typeContext>(i);
		}
		public ITerminalNode[] LOGICAL_OR() { return GetTokens(FluentLangParser.LOGICAL_OR); }
		public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(FluentLangParser.LOGICAL_OR, i);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 40, RULE_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; union_part_type();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 222; Match(LOGICAL_OR);
				State = 223; union_part_type();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LOGICAL_OR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_part_typeContext : ParserRuleContext {
		public Named_type_referenceContext named_type_reference() {
			return GetRuleContext<Named_type_referenceContext>(0);
		}
		public Primitive_typeContext primitive_type() {
			return GetRuleContext<Primitive_typeContext>(0);
		}
		public Anonymous_interface_declarationContext anonymous_interface_declaration() {
			return GetRuleContext<Anonymous_interface_declarationContext>(0);
		}
		public Union_part_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_part_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterUnion_part_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitUnion_part_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_part_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_part_typeContext union_part_type() {
		Union_part_typeContext _localctx = new Union_part_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_union_part_type);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; named_type_reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; primitive_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; anonymous_interface_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_signatureContext method_signature() {
			return GetRuleContext<Method_signatureContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(FluentLangParser.EXPORT, 0); }
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPORT) {
				{
				State = 233; Match(EXPORT);
				}
			}

			State = 236; method_signature();
			State = 237; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangParser.CLOSE_BRACE, 0); }
		public Method_statementContext[] method_statement() {
			return GetRuleContexts<Method_statementContext>();
		}
		public Method_statementContext method_statement(int i) {
			return GetRuleContext<Method_statementContext>(i);
		}
		public Method_declarationContext[] method_declaration() {
			return GetRuleContexts<Method_declarationContext>();
		}
		public Method_declarationContext method_declaration(int i) {
			return GetRuleContext<Method_declarationContext>(i);
		}
		public Interface_declarationContext[] interface_declaration() {
			return GetRuleContexts<Interface_declarationContext>();
		}
		public Interface_declarationContext interface_declaration(int i) {
			return GetRuleContext<Interface_declarationContext>(i);
		}
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_method_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(OPEN_BRACE);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DISCARD) | (1L << INTERFACE) | (1L << RETURN) | (1L << EXPORT) | (1L << LET) | (1L << UPPERCASE_IDENTIFIER))) != 0)) {
				{
				State = 243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 240; method_statement();
					}
					break;
				case 2:
					{
					State = 241; method_declaration();
					}
					break;
				case 3:
					{
					State = 242; interface_declaration();
					}
					break;
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 248; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_statementContext : ParserRuleContext {
		public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Method_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMethod_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMethod_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_statementContext method_statement() {
		Method_statementContext _localctx = new Method_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_method_statement);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISCARD:
			case LET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; declaration_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; return_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(FluentLangParser.LET, 0); }
		public ITerminalNode LOWERCASE_IDENTIFIER() { return GetToken(FluentLangParser.LOWERCASE_IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(FluentLangParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangParser.SEMICOLON, 0); }
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public ITerminalNode DISCARD() { return GetToken(FluentLangParser.DISCARD, 0); }
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_declaration_statement);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(LET);
				State = 255; Match(LOWERCASE_IDENTIFIER);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 256; type_declaration();
					}
				}

				State = 259; Match(ASSIGNMENT);
				State = 260; expression(0);
				State = 261; Match(SEMICOLON);
				}
				break;
			case DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; Match(DISCARD);
				State = 264; Match(ASSIGNMENT);
				State = 265; expression(0);
				State = 266; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(FluentLangParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangParser.SEMICOLON, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(RETURN);
			State = 271; expression(0);
			State = 272; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Local_reference_expressionContext : ExpressionContext {
		public ITerminalNode LOWERCASE_IDENTIFIER() { return GetToken(FluentLangParser.LOWERCASE_IDENTIFIER, 0); }
		public Local_reference_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterLocal_reference_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitLocal_reference_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_reference_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Binary_operator_expressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Binary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Conditional_expressionContext : ExpressionContext {
		public ITerminalNode IF() { return GetToken(FluentLangParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(FluentLangParser.OPEN_PARENS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(FluentLangParser.CLOSE_PARENS, 0); }
		public ITerminalNode ELSE() { return GetToken(FluentLangParser.ELSE, 0); }
		public Conditional_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Parenthesized_expressionContext : ExpressionContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(FluentLangParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(FluentLangParser.CLOSE_PARENS, 0); }
		public Parenthesized_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Prefix_unary_operator_expressionContext : ExpressionContext {
		public Prefix_unary_operatorContext prefix_unary_operator() {
			return GetRuleContext<Prefix_unary_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Prefix_unary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_invocation_expressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(FluentLangParser.DOT, 0); }
		public ITerminalNode UPPERCASE_IDENTIFIER() { return GetToken(FluentLangParser.UPPERCASE_IDENTIFIER, 0); }
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public Member_invocation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMember_invocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMember_invocation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_invocation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Match_expressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode MATCH() { return GetToken(FluentLangParser.MATCH, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangParser.CLOSE_BRACE, 0); }
		public Match_expression_armContext[] match_expression_arm() {
			return GetRuleContexts<Match_expression_armContext>();
		}
		public Match_expression_armContext match_expression_arm(int i) {
			return GetRuleContext<Match_expression_armContext>(i);
		}
		public Match_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMatch_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMatch_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_expressionContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Literal_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Static_invocation_expressionContext : ExpressionContext {
		public Method_referenceContext method_reference() {
			return GetRuleContext<Method_referenceContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public Static_invocation_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterStatic_invocation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitStatic_invocation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_invocation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_object_expressionContext : ExpressionContext {
		public Empty_interfaceContext empty_interface() {
			return GetRuleContext<Empty_interfaceContext>(0);
		}
		public New_object_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterNew_object_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitNew_object_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_object_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_patching_expressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(FluentLangParser.PLUS, 0); }
		public Object_patchContext[] object_patch() {
			return GetRuleContexts<Object_patchContext>();
		}
		public Object_patchContext object_patch(int i) {
			return GetRuleContext<Object_patchContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangParser.COMMA, i);
		}
		public Object_patching_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterObject_patching_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitObject_patching_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_patching_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				_localctx = new New_object_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 275; empty_interface();
				}
				break;
			case MINUS:
				{
				_localctx = new Prefix_unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276; prefix_unary_operator();
				State = 277; expression(8);
				}
				break;
			case LITERAL_TRUE:
			case LITERAL_FALSE:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
				{
				_localctx = new Literal_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279; literal();
				}
				break;
			case UPPERCASE_IDENTIFIER:
				{
				_localctx = new Static_invocation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280; method_reference();
				State = 281; invocation();
				}
				break;
			case IF:
				{
				_localctx = new Conditional_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283; Match(IF);
				State = 284; Match(OPEN_PARENS);
				State = 285; expression(0);
				State = 286; Match(CLOSE_PARENS);
				State = 287; expression(0);
				State = 288; Match(ELSE);
				State = 289; expression(4);
				}
				break;
			case OPEN_PARENS:
				{
				_localctx = new Parenthesized_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291; Match(OPEN_PARENS);
				State = 292; expression(0);
				State = 293; Match(CLOSE_PARENS);
				}
				break;
			case LOWERCASE_IDENTIFIER:
				{
				_localctx = new Local_reference_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295; Match(LOWERCASE_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 326;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 298;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 299; @operator();
						State = 300; expression(10);
						}
						break;
					case 2:
						{
						_localctx = new Object_patching_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 302;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 303; Match(PLUS);
						State = 304; object_patch();
						State = 309;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 305; Match(COMMA);
								State = 306; object_patch();
								}
								} 
							}
							State = 311;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
						}
						}
						break;
					case 3:
						{
						_localctx = new Member_invocation_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 313; Match(DOT);
						State = 314; Match(UPPERCASE_IDENTIFIER);
						State = 315; invocation();
						}
						break;
					case 4:
						{
						_localctx = new Match_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 317; Match(MATCH);
						State = 318; Match(OPEN_BRACE);
						State = 322;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_BRACE) | (1L << BOOL) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING) | (1L << UPPERCASE_IDENTIFIER) | (1L << LOWERCASE_IDENTIFIER))) != 0)) {
							{
							{
							State = 319; match_expression_arm();
							}
							}
							State = 324;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 325; Match(CLOSE_BRACE);
						}
						break;
					}
					} 
				}
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Empty_interfaceContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(FluentLangParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(FluentLangParser.CLOSE_BRACE, 0); }
		public Empty_interfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_interface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterEmpty_interface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitEmpty_interface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_interface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_interfaceContext empty_interface() {
		Empty_interfaceContext _localctx = new Empty_interfaceContext(Context, State);
		EnterRule(_localctx, 56, RULE_empty_interface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(OPEN_BRACE);
			State = 332; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_patchContext : ParserRuleContext {
		public Method_referenceContext method_reference() {
			return GetRuleContext<Method_referenceContext>(0);
		}
		public ITerminalNode MIXIN() { return GetToken(FluentLangParser.MIXIN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_patchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_patch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterObject_patch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitObject_patch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_patch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_patchContext object_patch() {
		Object_patchContext _localctx = new Object_patchContext(Context, State);
		EnterRule(_localctx, 58, RULE_object_patch);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPPERCASE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; method_reference();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; Match(MIXIN);
				State = 336; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_referenceContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Method_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMethod_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMethod_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_referenceContext method_reference() {
		Method_referenceContext _localctx = new Method_referenceContext(Context, State);
		EnterRule(_localctx, 60, RULE_method_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; qualified_name();
			State = 340; type_argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(FluentLangParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(FluentLangParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(FluentLangParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(FluentLangParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(FluentLangParser.PERCENT, 0); }
		public ITerminalNode LT() { return GetToken(FluentLangParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(FluentLangParser.GT, 0); }
		public ITerminalNode OP_EQ() { return GetToken(FluentLangParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(FluentLangParser.OP_NE, 0); }
		public ITerminalNode OP_LE() { return GetToken(FluentLangParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(FluentLangParser.OP_GE, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << LT) | (1L << GT) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_unary_operatorContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(FluentLangParser.MINUS, 0); }
		public Prefix_unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterPrefix_unary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitPrefix_unary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_unary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_unary_operatorContext prefix_unary_operator() {
		Prefix_unary_operatorContext _localctx = new Prefix_unary_operatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_prefix_unary_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode LITERAL_TRUE() { return GetToken(FluentLangParser.LITERAL_TRUE, 0); }
		public ITerminalNode LITERAL_FALSE() { return GetToken(FluentLangParser.LITERAL_FALSE, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(FluentLangParser.INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(FluentLangParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(FluentLangParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode REGULAR_STRING() { return GetToken(FluentLangParser.REGULAR_STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LITERAL_TRUE) | (1L << LITERAL_FALSE) | (1L << INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(FluentLangParser.OPEN_PARENS, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(FluentLangParser.CLOSE_PARENS, 0); }
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 68, RULE_invocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(OPEN_PARENS);
			State = 349; arguments();
			State = 350; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FluentLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FluentLangParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 70, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << LITERAL_TRUE) | (1L << LITERAL_FALSE) | (1L << INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << IF) | (1L << UPPERCASE_IDENTIFIER) | (1L << LOWERCASE_IDENTIFIER))) != 0)) {
				{
				State = 352; expression(0);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 353; Match(COMMA);
					State = 354; expression(0);
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_expression_armContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RIGHT_ARROW() { return GetToken(FluentLangParser.RIGHT_ARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FluentLangParser.SEMICOLON, 0); }
		public ITerminalNode LOWERCASE_IDENTIFIER() { return GetToken(FluentLangParser.LOWERCASE_IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(FluentLangParser.COLON, 0); }
		public Match_expression_armContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_expression_arm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterMatch_expression_arm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitMatch_expression_arm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_expression_arm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_expression_armContext match_expression_arm() {
		Match_expression_armContext _localctx = new Match_expression_armContext(Context, State);
		EnterRule(_localctx, 72, RULE_match_expression_arm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOWERCASE_IDENTIFIER) {
				{
				State = 362; Match(LOWERCASE_IDENTIFIER);
				State = 363; Match(COLON);
				}
			}

			State = 366; type();
			State = 367; Match(RIGHT_ARROW);
			State = 368; expression(0);
			State = 369; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_metadataContext : ParserRuleContext {
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangParser.Eof, 0); }
		public Parameter_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterParameter_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitParameter_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_metadataContext parameter_metadata() {
		Parameter_metadataContext _localctx = new Parameter_metadataContext(Context, State);
		EnterRule(_localctx, 74, RULE_parameter_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; parameter();
			State = 372; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_type_metadataContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangParser.Eof, 0); }
		public Return_type_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterReturn_type_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitReturn_type_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_type_metadataContext return_type_metadata() {
		Return_type_metadataContext _localctx = new Return_type_metadataContext(Context, State);
		EnterRule(_localctx, 76, RULE_return_type_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; type();
			State = 375; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_interface_declaration_metadataContext : ParserRuleContext {
		public Anonymous_interface_declarationContext anonymous_interface_declaration() {
			return GetRuleContext<Anonymous_interface_declarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangParser.Eof, 0); }
		public Anonymous_interface_declaration_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_interface_declaration_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_interface_declaration_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_interface_declaration_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_interface_declaration_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_interface_declaration_metadataContext anonymous_interface_declaration_metadata() {
		Anonymous_interface_declaration_metadataContext _localctx = new Anonymous_interface_declaration_metadataContext(Context, State);
		EnterRule(_localctx, 78, RULE_anonymous_interface_declaration_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; anonymous_interface_declaration();
			State = 378; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_metadataContext : ParserRuleContext {
		public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FluentLangParser.Eof, 0); }
		public Type_parameter_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_metadataContext type_parameter_metadata() {
		Type_parameter_metadataContext _localctx = new Type_parameter_metadataContext(Context, State);
		EnterRule(_localctx, 80, RULE_type_parameter_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; type_parameter();
			State = 381; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_qualified_name_metadataContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Full_qualified_name_metadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_qualified_name_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.EnterFull_qualified_name_metadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFluentLangParserListener typedListener = listener as IFluentLangParserListener;
			if (typedListener != null) typedListener.ExitFull_qualified_name_metadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFluentLangParserVisitor<TResult> typedVisitor = visitor as IFluentLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_qualified_name_metadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_qualified_name_metadataContext full_qualified_name_metadata() {
		Full_qualified_name_metadataContext _localctx = new Full_qualified_name_metadataContext(Context, State);
		EnterRule(_localctx, 82, RULE_full_qualified_name_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x184', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'Y', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\\', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 
		'\x61', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x64', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', 'm', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', 'p', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'u', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '{', '\n', '\a', '\f', '\a', '\xE', '\a', '~', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', '\x83', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x8E', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\x91', '\v', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x99', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x9E', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA1', '\v', 
		'\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA5', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xA8', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xAC', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xB5', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB8', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xBC', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\xCB', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\xCE', '\v', '\x11', '\x5', '\x11', '\xD0', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xDC', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', '\xE3', '\n', '\x16', 
		'\r', '\x16', '\xE', '\x16', '\xE4', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xEA', '\n', '\x17', '\x3', '\x18', '\x5', '\x18', 
		'\xED', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xF6', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xF9', '\v', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xFF', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x104', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x10F', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x12B', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x136', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x139', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x143', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x146', '\v', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x149', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x14C', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x154', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', 
		'\x166', '\n', '%', '\f', '%', '\xE', '%', '\x169', '\v', '%', '\x5', 
		'%', '\x16B', '\n', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x16F', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x2', '\x3', '\x38', ',', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', '\x2', '\x5', '\x3', '\x2', 
		'\x1C', ' ', '\x3', '\x2', '\x5', '\xF', '\x3', '\x2', '!', '&', '\x2', 
		'\x187', '\x2', 'V', '\x3', '\x2', '\x2', '\x2', '\x4', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x65', '\x3', '\x2', '\x2', '\x2', '\b', 
		'i', '\x3', '\x2', '\x2', '\x2', '\n', 't', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'v', '\x3', '\x2', '\x2', '\x2', '\xE', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x94', '\x3', '\x2', '\x2', '\x2', '\x12', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xC0', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\"', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD4', '\x3', '\x2', '\x2', '\x2', '&', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xDD', '\x3', '\x2', '\x2', '\x2', '*', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xE9', '\x3', '\x2', '\x2', '\x2', '.', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x34', '\x10E', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x110', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x153', '\x3', '\x2', '\x2', '\x2', '>', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x158', '\x3', '\x2', '\x2', '\x2', '\x42', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x15E', '\x3', '\x2', '\x2', '\x2', 'H', '\x16A', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x16E', '\x3', '\x2', '\x2', '\x2', 'L', '\x175', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x17B', '\x3', '\x2', '\x2', '\x2', 'R', '\x17E', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x181', '\x3', '\x2', '\x2', '\x2', 'V', 'Z', '\x5', 
		'\x4', '\x3', '\x2', 'W', 'Y', '\x5', '\n', '\x6', '\x2', 'X', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 
		']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\a', '\x2', '\x2', '\x3', '^', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '_', '\x61', '\x5', '\x6', '\x4', '\x2', '`', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', '\x2', '\x62', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x5', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '.', '\x2', '\x2', '\x66', 'g', '\x5', 
		'\b', '\x5', '\x2', 'g', 'h', '\a', '\x18', '\x2', '\x2', 'h', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'n', '\a', '\x31', '\x2', '\x2', 'j', 'k', '\a', 
		'\x15', '\x2', '\x2', 'k', 'm', '\a', '\x31', '\x2', '\x2', 'l', 'j', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', '\t', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'u', '\x5', '\f', '\a', '\x2', 'r', 'u', '\x5', '\xE', '\b', 
		'\x2', 's', 'u', '\x5', '.', '\x18', '\x2', 't', 'q', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\'', '\x2', 
		'\x2', 'w', 'x', '\x5', '\b', '\x5', '\x2', 'x', '|', '\a', '\x11', '\x2', 
		'\x2', 'y', '{', '\x5', '\n', '\x6', '\x2', 'z', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\x12', '\x2', '\x2', '\x80', '\r', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x83', '\a', '-', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', '(', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x31', '\x2', '\x2', '\x86', '\x87', '\x5', '\x10', '\t', 
		'\x2', '\x87', '\x88', '\x5', '\x14', '\v', '\x2', '\x88', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\n', '\x2', '\x2', '\x8A', 
		'\x8F', '\x5', '\x12', '\n', '\x2', '\x8B', '\x8C', '\a', '\x16', '\x2', 
		'\x2', '\x8C', '\x8E', '\x5', '\x12', '\n', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\v', '\x2', '\x2', '\x93', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x98', '\a', '\x31', '\x2', '\x2', '\x97', 
		'\x99', '\x5', '$', '\x13', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9F', '\x5', '\x16', '\f', '\x2', '\x9B', 
		'\x9C', '\a', '\x5', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x16', '\f', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA6', '\a', 
		'\x11', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x1C', '\xF', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\a', '\x12', '\x2', 
		'\x2', '\xAA', '\xAC', '\x5', '\x18', '\r', '\x2', '\xAB', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\b', '\x5', 
		'\x2', '\xAE', '\xAF', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\n', '\x2', '\x2', '\xB1', 
		'\xB6', '\x5', '&', '\x14', '\x2', '\xB2', '\xB3', '\a', '\x16', '\x2', 
		'\x2', '\xB3', '\xB5', '\x5', '&', '\x14', '\x2', '\xB4', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\v', '\x2', '\x2', '\xBA', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x1E', '\x10', '\x2', '\xBE', 
		'\xBF', '\a', '\x18', '\x2', '\x2', '\xBF', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x31', '\x2', '\x2', '\xC1', '\xC2', '\x5', 
		'\x10', '\t', '\x2', '\xC2', '\xC3', '\a', '\x13', '\x2', '\x2', '\xC3', 
		'\xC4', '\x5', ' ', '\x11', '\x2', '\xC4', '\xC5', '\a', '\x14', '\x2', 
		'\x2', '\xC5', '\xC6', '\x5', '$', '\x13', '\x2', '\xC6', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xCC', '\x5', '\"', '\x12', '\x2', '\xC8', 
		'\xC9', '\a', '\x16', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\"', '\x12', 
		'\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x32', '\x2', 
		'\x2', '\xD2', '\xD3', '\x5', '$', '\x13', '\x2', '\xD3', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x17', '\x2', '\x2', '\xD5', 
		'\xD6', '\x5', '&', '\x14', '\x2', '\xD6', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xDC', '\x5', '\x18', '\r', '\x2', '\xD8', '\xDC', '\x5', '(', 
		'\x15', '\x2', '\xD9', '\xDC', '\x5', '\x14', '\v', '\x2', '\xDA', '\xDC', 
		'\x5', '*', '\x16', '\x2', '\xDB', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\t', '\x2', '\x2', '\x2', 
		'\xDE', ')', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x5', ',', '\x17', 
		'\x2', '\xE0', '\xE1', '\a', '\x1A', '\x2', '\x2', '\xE1', '\xE3', '\x5', 
		',', '\x17', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xEA', '\x5', '\x18', '\r', '\x2', '\xE7', 
		'\xEA', '\x5', '(', '\x15', '\x2', '\xE8', '\xEA', '\x5', '\x14', '\v', 
		'\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\a', '-', '\x2', '\x2', 
		'\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\x5', '\x1E', '\x10', '\x2', '\xEF', '\xF0', '\x5', '\x30', '\x19', '\x2', 
		'\xF0', '/', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF7', '\a', '\x11', 
		'\x2', '\x2', '\xF2', '\xF6', '\x5', '\x32', '\x1A', '\x2', '\xF3', '\xF6', 
		'\x5', '.', '\x18', '\x2', '\xF4', '\xF6', '\x5', '\xE', '\b', '\x2', 
		'\xF5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', 
		'\a', '\x12', '\x2', '\x2', '\xFB', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFF', '\x5', '\x34', '\x1B', '\x2', '\xFD', '\xFF', '\x5', '\x36', 
		'\x1C', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x101', '\a', '/', '\x2', '\x2', '\x101', '\x103', '\a', '\x32', 
		'\x2', '\x2', '\x102', '\x104', '\x5', '$', '\x13', '\x2', '\x103', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', 
		'\x10', '\x2', '\x2', '\x106', '\x107', '\x5', '\x38', '\x1D', '\x2', 
		'\x107', '\x108', '\a', '\x18', '\x2', '\x2', '\x108', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x19', '\x2', '\x2', '\x10A', 
		'\x10B', '\a', '\x10', '\x2', '\x2', '\x10B', '\x10C', '\x5', '\x38', 
		'\x1D', '\x2', '\x10C', '\x10D', '\a', '\x18', '\x2', '\x2', '\x10D', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', ')', '\x2', '\x2', 
		'\x111', '\x112', '\x5', '\x38', '\x1D', '\x2', '\x112', '\x113', '\a', 
		'\x18', '\x2', '\x2', '\x113', '\x37', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\b', '\x1D', '\x1', '\x2', '\x115', '\x12B', '\x5', ':', '\x1E', 
		'\x2', '\x116', '\x117', '\x5', '\x42', '\"', '\x2', '\x117', '\x118', 
		'\x5', '\x38', '\x1D', '\n', '\x118', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x12B', '\x5', '\x44', '#', '\x2', '\x11A', '\x11B', '\x5', 
		'>', ' ', '\x2', '\x11B', '\x11C', '\x5', '\x46', '$', '\x2', '\x11C', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '*', '\x2', 
		'\x2', '\x11E', '\x11F', '\a', '\x13', '\x2', '\x2', '\x11F', '\x120', 
		'\x5', '\x38', '\x1D', '\x2', '\x120', '\x121', '\a', '\x14', '\x2', '\x2', 
		'\x121', '\x122', '\x5', '\x38', '\x1D', '\x2', '\x122', '\x123', '\a', 
		'+', '\x2', '\x2', '\x123', '\x124', '\x5', '\x38', '\x1D', '\x6', '\x124', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\a', '\x13', '\x2', 
		'\x2', '\x126', '\x127', '\x5', '\x38', '\x1D', '\x2', '\x127', '\x128', 
		'\a', '\x14', '\x2', '\x2', '\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12B', '\a', '\x32', '\x2', '\x2', '\x12A', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x116', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\f', 
		'\v', '\x2', '\x2', '\x12D', '\x12E', '\x5', '@', '!', '\x2', '\x12E', 
		'\x12F', '\x5', '\x38', '\x1D', '\f', '\x12F', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '\x130', '\x131', '\f', '\f', '\x2', '\x2', '\x131', '\x132', 
		'\a', '\x5', '\x2', '\x2', '\x132', '\x137', '\x5', '<', '\x1F', '\x2', 
		'\x133', '\x134', '\a', '\x16', '\x2', '\x2', '\x134', '\x136', '\x5', 
		'<', '\x1F', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13B', '\f', '\a', '\x2', '\x2', '\x13B', '\x13C', '\a', '\x15', 
		'\x2', '\x2', '\x13C', '\x13D', '\a', '\x31', '\x2', '\x2', '\x13D', '\x149', 
		'\x5', '\x46', '$', '\x2', '\x13E', '\x13F', '\f', '\x3', '\x2', '\x2', 
		'\x13F', '\x140', '\a', '\x30', '\x2', '\x2', '\x140', '\x144', '\a', 
		'\x11', '\x2', '\x2', '\x141', '\x143', '\x5', 'J', '&', '\x2', '\x142', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\a', 
		'\x12', '\x2', '\x2', '\x148', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x148', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\a', '\x11', '\x2', '\x2', '\x14E', '\x14F', '\a', '\x12', '\x2', 
		'\x2', '\x14F', ';', '\x3', '\x2', '\x2', '\x2', '\x150', '\x154', '\x5', 
		'>', ' ', '\x2', '\x151', '\x152', '\a', ',', '\x2', '\x2', '\x152', '\x154', 
		'\x5', '\x38', '\x1D', '\x2', '\x153', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\x5', '\b', '\x5', '\x2', '\x156', '\x157', 
		'\x5', '\x1A', '\xE', '\x2', '\x157', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x159', '\t', '\x3', '\x2', '\x2', '\x159', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x15A', '\x15B', '\a', '\x6', '\x2', '\x2', '\x15B', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\t', '\x4', '\x2', '\x2', 
		'\x15D', '\x45', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x13', 
		'\x2', '\x2', '\x15F', '\x160', '\x5', 'H', '%', '\x2', '\x160', '\x161', 
		'\a', '\x14', '\x2', '\x2', '\x161', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x167', '\x5', '\x38', '\x1D', '\x2', '\x163', '\x164', '\a', 
		'\x16', '\x2', '\x2', '\x164', '\x166', '\x5', '\x38', '\x1D', '\x2', 
		'\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16B', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', 'I', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '\x32', 
		'\x2', '\x2', '\x16D', '\x16F', '\a', '\x17', '\x2', '\x2', '\x16E', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x5', 
		'&', '\x14', '\x2', '\x171', '\x172', '\a', '\x1B', '\x2', '\x2', '\x172', 
		'\x173', '\x5', '\x38', '\x1D', '\x2', '\x173', '\x174', '\a', '\x18', 
		'\x2', '\x2', '\x174', 'K', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', 
		'\x5', '\"', '\x12', '\x2', '\x176', '\x177', '\a', '\x2', '\x2', '\x3', 
		'\x177', 'M', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x5', '&', 
		'\x14', '\x2', '\x179', '\x17A', '\a', '\x2', '\x2', '\x3', '\x17A', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x5', '\x14', '\v', '\x2', 
		'\x17C', '\x17D', '\a', '\x2', '\x2', '\x3', '\x17D', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x17E', '\x17F', '\x5', '\x12', '\n', '\x2', '\x17F', '\x180', 
		'\a', '\x2', '\x2', '\x3', '\x180', 'S', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x182', '\x5', '\b', '\x5', '\x2', '\x182', 'U', '\x3', '\x2', '\x2', 
		'\x2', '$', 'Z', '\x62', 'n', 't', '|', '\x82', '\x8F', '\x94', '\x98', 
		'\x9F', '\xA6', '\xAB', '\xB6', '\xBB', '\xCC', '\xCF', '\xDB', '\xE4', 
		'\xE9', '\xEC', '\xF5', '\xF7', '\xFE', '\x103', '\x10E', '\x12A', '\x137', 
		'\x144', '\x148', '\x14A', '\x153', '\x167', '\x16A', '\x16E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FluentLang.Compiler.Generated
